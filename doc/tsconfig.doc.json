{
	"compileOnSave": true,
	"include": [
		"src/ts"
	],
	"exclude": [
		"node_modules",
		"gulpfile.js",
		"wwwroot",
		"src/js"
	],
	"compilerOptions": {
		/* Basic Options */
		//"outFile": "src/js/main-ts.js",	/* Concatenate and emit output to single file. */
		"outDir": "src/js",					/* Redirect output structure to the directory. */
		"rootDir": "src/ts",				/* Root directory of input files. Use to control the output directory with --outDir. */

		/* Module Resolution Options */
		"baseUrl": "./", /* Base directory to resolve non-absolute module names. */
		"target": "es6", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
		"module": "es6", /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'. */
		"moduleResolution": "classic", /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
		"jsx": "preserve",	/* Specify JSX code generation: 'react-jsx', 'preserve', 'react-native', or 'react'. */
		"lib": [ "dom", "dom.iterable", "es6", "esnext" ], /* Specify library files to be included in the compilation:  */
		/* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
		"paths": {
			"tslib": [ "./../../../node_modules/tslib/tslib.d.ts" ],
			"jquery": [ "./../../../node_modules/jquery/dist/jquery" ]
		},
		//"rootDirs": [],       /* List of root folders whose combined content represents the structure of the project at runtime. */
		//"typeRoots": [],      /* List of folders to include type definitions from. */
		//"types": [],          /* Type declaration files to be included in compilation. */
		/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables [allowSyntheticDefaultImports] for type compatibility. */
		"esModuleInterop": true,
		/* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
		"allowSyntheticDefaultImports": true,
		//"resolveJsonModule": true,
		"isolatedModules": true, /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

		/* Basic Options */
		"charset": "utf-8",
		"newLine": "crlf",
		//"emitBOM": true,
		"allowJs": true,					/* Allow javascript files to be compiled. */
		"checkJs": true,					/* Report errors in .js files. */
		"skipLibCheck": true,
		//"declaration": true,				/* Generates corresponding '.d.ts' file. */
		"importHelpers": true,				/* Import emit helpers from 'tslib'. */
		"sourceMap": true,					/* Generates corresponding '.map' file. */
		"removeComments": false,			/* Do not emit comments to output. */
		//"noLib": true,
		"noEmit": false,					/* Do not emit outputs. */
		"noEmitOnError": true,
		"noEmitHelpers": false,
		/* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
		//"downlevelIteration": true,		

		/* Source Map Options */
		// "sourceRoot": "./",	/* Specify the location where debugger should locate TypeScript files instead of source locations. */
		// "mapRoot": "./",		/* Specify the location where debugger should locate map files instead of generated locations. */
		// "inlineSourceMap": true,	/* Emit a single file with source maps instead of having a separate file. */
		/* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. 	
		// "inlineSources": true,
		
		/* Strict Type-Checking Options */
		"strict": true,						/* Enable all strict type-checking options. */
		"alwaysStrict": true,				/* Parse in strict mode and emit "use strict" for each source file. */
		"noImplicitAny": true,				/* Raise error on expressions and declarations with an implied 'any' type. */
		"strictNullChecks": true,			/* Enable strict null checks. */
		"noImplicitThis": true,				/* Raise error on 'this' expressions with an implied 'any' type. */
		"noImplicitUseStrict": false,

		/* Linter Checks */
		"noUnusedLocals": true,             /* Report errors on unused locals. */
		"noUnusedParameters": true,         /* Report errors on unused parameters. */
		"noImplicitReturns": true,          /* Report error when not all code paths in function return a value. */
		"allowUnreachableCode": true,		/* disallow unreachable code after return, throw, continue, and break statements */
		"noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
		"forceConsistentCasingInFileNames": true
		//"allowUnusedLabels": true,		/* Disallow Unused Labels */

		/* Additional Checks */
		//"strictPropertyInitialization": true,
		//"strictFunctionTypes": true,
		//"strictBindCallApply": true,
		//"noPropertyAccessFromIndexSignature": true,
		//"noUncheckedIndexedAccess": true,
		//"suppressExcessPropertyErrors": false,
		//"suppressImplicitAnyIndexErrors": false,
		//"noStrictGenericChecks": false

		/* Experimental Options */
		// "experimentalDecorators": true,  /* Enables experimental support for ES7 decorators. */
		// "emitDecoratorMetadata": true,   /* Enables experimental support for emitting type metadata for decorators. */
	}
}

/*
{
	"compilerOptions": {
		"target": "es5",
		"module": "commonjs",
		"lib": [ "es6" ],
		"allowJs": true,
		"outDir": "build",
		"rootDir": "src",
		"strict": true,
		"noImplicitAny": true,
		"esModuleInterop": true,
		"resolveJsonModule": true
	}
}
*/

/*
{
	"compilerOptions": {
		"target": "es5",
		"lib": [
			"dom",
			"dom.iterable",
			"esnext"
		],
		"allowJs": true,
		"skipLibCheck": true,
		"esModuleInterop": true,
		"allowSyntheticDefaultImports": true,
		"strict": true,
		"forceConsistentCasingInFileNames": true,
		"noFallthroughCasesInSwitch": true,
		"module": "esnext",
		"moduleResolution": "node",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react-jsx"
	},
	"include": [
		"src"
	]
}
*/

/*
"compileOnSave": true,
	// Установка свойства верхнего уровня compileOnSaveсигнализирует IDE для генерации всех файлов для данного tsconfig.json при сохранении
	// https://www.typescriptlang.org/docs/handbook/compiler-options.html
"compilerOptions": {
	"allowJs": true,
		// Разрешить компиляцию файлов JavaScript
	"alwaysStrict": true,
		// Разбор в строгом режиме и генерация "use strict" для каждого исходного файла
	"baseUrl": ".",
		// Базовый каталог для разрешения не относительных имен модулей. См. Раздел «Разрешение модуля» для получения более подробной информации
		// https://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url
	"checkJs": true,
		// Сообщить об ошибках в .js файлах. Используйте в сочетании с --allowJs
	"charset": "utf-8",
		// Набор символов входных файлов
	"emitBOM": true,
		// Излучите метку порядка байтов UTF-8 (BOM) в начале выходных файлов
	"importHelpers": true,
		// Импорт помощников (например __extends, __rest и т. Д.) Из tslib
		// https://www.npmjs.com/package/tslib
	"lib": [
		"es2016",
		"dom",
		"es5"
	],
		// Список файлов библиотеки для включения в компиляцию. Используемые по умолчанию библиотеки:
			► Для --target ES5: DOM,ES5,ScriptHost
			► Для --target ES6: DOM,ES6,DOM.Iterable,ScriptHost
	"module": "commonjs",
		// Укажите генерацию кода модуля: "None", "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015"или "ESNext".
		// target === "ES3" or "ES5" ? "CommonJS" : "ES6"
			► Только "AMD" и "System" может использоваться вместе с --outFile.
			► "ES6"и "ES2015" значения могут быть использованы при нацеливании "ES5"или ниже
	"moduleResolution": "node", // module === "AMD" or "System" or "ES6" ? "Classic" : "Node"
		// Определите, как модули разрешаются. Либо "Node"для разрешения стиля Node.js / io.js, либо "Classic"
	"newLine": "crlf",
		// для конкретной платформы
		// Используйте указанную последовательность конца строки, которая будет использоваться при отправке файлов: "crlf"(windows) или "lf"(unix)
	"noEmitOnError": true,
		// Не выдавайте выходные данные, если были обнаружены какие-либо ошибки
	"noEmitHelpers": false,
		// Не генерируйте пользовательские вспомогательные функции, как __extends в скомпилированном выводе
	"noImplicitAny": false,
		// Поднимите ошибку в выражениях и объявлениях с подразумеваемым anyтипом
	"noImplicitUseStrict": false,
		// Не испускайте "use strict" директивы при выводе модуля
	"noLib": false,
		// Не включайте файл библиотеки по умолчанию ( lib.d.ts)
	"paths": {
		"jquery": [ "node_modules/jquery/dist/jquery" ], // This mapping is relative to "baseUrl"
		"tslib" : ["node_modules/tslib/tslib.d.ts"]
	},
		// Список записей сопоставления путей для имен модулей в расположениях, относящихся к baseUrl. См. Раздел « Разрешение модуля» для получения более подробной информации
		// https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping
	"removeComments": false,
		// Удалите все комментарии, кроме комментариев к заголовку с копией права /*!
	"sourceMap": true,
		// Создает соответствующий .map файл
	"target": "es6",
		// Укажите целевую версию ECMAScript:
			► "ES3"(по умолчанию)
			► "ES5"
			► "ES6"/ "ES2015"
			► "ES2016"
			► "ES2017"
			► "ES2018"
			► "ES2019"
			► "ES2020"
			► "ESNext"
		// Примечание: "ESNext"предназначается для последних поддерживаемых https://github.com/tc39/proposals
	"rootDir": "Client",
		// общий корневой каталог вычисляется из списка входных файлов
	"outDir": "wwwroot"
		// Перенаправить структуру вывода в каталог
		// Определяет корневой каталог входных файлов. Используйте только для управления структурой выходного каталога --outDir
	"outFile": "wwwroot/js/main.js",
		// Объединить и выдать вывод в один файл. Порядок конкатенации определяется списком файлов, передаваемых компилятору в командной строке, а также ссылками и импортом с тройной косой чертой. См. Документацию заказа выходного файла (https://github.com/Microsoft/TypeScript/wiki/FAQ#how-do-i-control-file-ordering-in-combined-output---out-) для более подробной информации
},
"exclude": [
	"wwwroot",
	"node_modules",
	"gulpfile.js",
	"Client/**_/*.js"
],
"include": [
	"Client"
]

Примечание. Если --lib список библиотек по умолчанию не указан, впрыскивается. Используемые по умолчанию библиотеки:
	► Для --target ES5: DOM, ES5, ScriptHost
	► Для --target ES6: DOM, ES6, DOM.Iterable, ScriptHost
Список файлов библиотеки для включения в компиляцию. Возможные значения:
	► ES5
	► ES6
	► ES2015
	► ES7
	► ► ► ► ► ► ES2016
	► ES2017
	► ES2018
	► ESNext
	► DOM
	► DOM.Iterable
	► WebWorker
	► ScriptHost
	► ES2015.Core
	► ES2015.Collection
	► ES2015.Generator
	► ES2015.Iterable
	► ES2015.Promise
	► ES2015.Proxy
	► ES2015.Reflect
	► ES2015.Symbol
	► ES2015.Symbol.WellKnown
	► ES2016.Array.Include
	► ES2017.object
	► ES2017.Intl
	► ES2017.SharedMemory
	► ES2017.String
	► ES2017.TypedArrays
	► ES2018.Intl
	► ES2018.Promise
	► ES2018.RegExp
	► ESNext.AsyncIterable
	► ESNext.Array
	► ESNext.Intl
	► ESNext.Symbol
*/
