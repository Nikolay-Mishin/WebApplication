{
	"compileOnSave": true,
	"compilerOptions": {
		"allowJs": true,
		"alwaysStrict": true,
		"baseUrl": ".",
		// "checkJs": true,
		"charset": "utf-8",
		// "declaration": true,
		"emitBOM": true,
		"importHelpers": true,
		"lib": [
			"es2016",
			"dom",
			"es5",
			"es2015",
			"es6"
		],
		"module": "commonjs",
		"moduleResolution": "node",
		"newLine": "crlf",
		"noEmitOnError": true,
		// "noEmitHelpers": false,
		"noImplicitAny": false,
		// "noImplicitUseStrict": false,
		// "noLib": false,
		"paths": {
			// "tslib": [ "node_modules/tslib/tslib.d.ts" ],
			"jquery": [ "node_modules/jquery/dist/jquery" ]
		},
		"removeComments": false,
		"sourceMap": true,
		"target": "es5",
		// "rootDir": "Client",
		"outDir": "Client/js"
		// "outFile": "Client/js/main.js"
	},
	"exclude": [
		"node_modules",
		"gulpfile.js",
		"wwwroot",
		"Client/js"
	],
	"include": [
		"Client/ts"
	]
}

/*
"compileOnSave": true,
	// Установка свойства верхнего уровня compileOnSaveсигнализирует IDE для генерации всех файлов для данного tsconfig.json при сохранении
	// https://www.typescriptlang.org/docs/handbook/compiler-options.html
"compilerOptions": {
	"allowJs": true,
		// Разрешить компиляцию файлов JavaScript
	"alwaysStrict": true,
		// Разбор в строгом режиме и генерация "use strict"для каждого исходного файла
	"baseUrl": ".",
		// Базовый каталог для разрешения не относительных имен модулей. См. Раздел «Разрешение модуля» для получения более подробной информации
		// https://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url
	"checkJs": true,
		// Сообщить об ошибках в .jsфайлах. Используйте в сочетании с --allowJs
	"charset": "utf-8",
		// Набор символов входных файлов
	"emitBOM": true,
		// Излучите метку порядка байтов UTF-8 (BOM) в начале выходных файлов
	"importHelpers": true,
		// Импорт помощников (например __extends, __restи т. Д.) Из tslib
		// https://www.npmjs.com/package/tslib
	"lib": [
		"es2016",
		"dom",
		"es5"
	],
		// Список файлов библиотеки для включения в компиляцию. Используемые по умолчанию библиотеки:
			► Для --target ES5: DOM,ES5,ScriptHost
			► Для --target ES6: DOM,ES6,DOM.Iterable,ScriptHost
	"module": "commonjs",
		// Укажите генерацию кода модуля: "None", "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015"или "ESNext".
		// target === "ES3" or "ES5" ? "CommonJS" : "ES6"
			► Только "AMD"и "System" может использоваться вместе с --outFile.
			► "ES6"и "ES2015"значения могут быть использованы при нацеливании "ES5"или ниже
	"moduleResolution": "node", // module === "AMD" or "System" or "ES6" ? "Classic" : "Node"
		// Определите, как модули разрешаются. Либо "Node"для разрешения стиля Node.js / io.js, либо "Classic"
	"newLine": "crlf",
		// для конкретной платформы
		// Используйте указанную последовательность конца строки, которая будет использоваться при отправке файлов: "crlf"(windows) или "lf"(unix)
	"noEmitOnError": true,
		// Не выдавайте выходные данные, если были обнаружены какие-либо ошибки
	"noEmitHelpers": false,
		// Не генерируйте пользовательские вспомогательные функции, как __extends в скомпилированном выводе
	"noImplicitAny": false,
		// Поднимите ошибку в выражениях и объявлениях с подразумеваемым anyтипом
	"noImplicitUseStrict": false,
		// Не испускайте "use strict"директивы при выводе модуля
	"noLib": false,
		// Не включайте файл библиотеки по умолчанию ( lib.d.ts)
	"paths": {
		"jquery": [ "node_modules/jquery/dist/jquery" ], // This mapping is relative to "baseUrl"
		"tslib" : ["node_modules/tslib/tslib.d.ts"]
	},
		// Список записей сопоставления путей для имен модулей в расположениях, относящихся к baseUrl. См. Раздел « Разрешение модуля» для получения более подробной информации
		// https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping
	"removeComments": false,
		// Удалите все комментарии, кроме комментариев к заголовку с копией права /*!
	"sourceMap": true,
		// Создает соответствующий .mapфайл
	"target": "es6",
		// Укажите целевую версию ECMAScript:
			► "ES3"(по умолчанию)
			► "ES5"
			► "ES6"/ "ES2015"
			► "ES2016"
			► "ES2017"
			► "ES2018"
			► "ES2019"
			► "ES2020"
			► "ESNext"
		// Примечание: "ESNext"предназначается для последних поддерживаемых https://github.com/tc39/proposals
	"rootDir": "Client",
		// общий корневой каталог вычисляется из списка входных файлов
	"outDir": "wwwroot"
		// Перенаправить структуру вывода в каталог
		// Определяет корневой каталог входных файлов. Используйте только для управления структурой выходного каталога --outDir
	"outFile": "./wwwroot/scripts/main.js",
		// Объединить и выдать вывод в один файл. Порядок конкатенации определяется списком файлов, передаваемых компилятору в командной строке, а также ссылками и импортом с тройной косой чертой. См. Документацию заказа выходного файла (https://github.com/Microsoft/TypeScript/wiki/FAQ#how-do-i-control-file-ordering-in-combined-output---out-) для более подробной информации
},
"exclude": [
	"wwwroot",
	"node_modules",
	"gulpfile.js",
	"Client/**_dev"
],
"include": [
	"Client"
]

Примечание. Если --lib список библиотек по умолчанию не указан, впрыскивается. Используемые по умолчанию библиотеки:
	► Для --target ES5: DOM, ES5, ScriptHost
	► Для --target ES6: DOM, ES6, DOM.Iterable, ScriptHost
Список файлов библиотеки для включения в компиляцию. Возможные значения:
	► ES5
	► ES6
	► ES2015
	► ES7
	► ► ► ► ► ► ES2016
	► ES2017
	► ES2018
	► ESNext
	► DOM
	► DOM.Iterable
	► WebWorker
	► ScriptHost
	► ES2015.Core
	► ES2015.Collection
	► ES2015.Generator
	► ES2015.Iterable
	► ES2015.Promise
	► ES2015.Proxy
	► ES2015.Reflect
	► ES2015.Symbol
	► ES2015.Symbol.WellKnown
	► ES2016.Array.Include
	► ES2017.object
	► ES2017.Intl
	► ES2017.SharedMemory
	► ES2017.String
	► ES2017.TypedArrays
	► ES2018.Intl
	► ES2018.Promise
	► ES2018.RegExp
	► ESNext.AsyncIterable
	► ESNext.Array
	► ESNext.Intl
	► ESNext.Symbol
*/
